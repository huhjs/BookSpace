<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bookMapper">
	<resultMap type="com.study.bookspace.book.vo.CategoryVO" id="category">
		<id 	column="BOOK_CATE_NO" 						 property="bookCateNo"/>
		<result column="BOOK_CATE_STR" 						 property="bookCateStr"/>
		<result column="BOOK_CATE_IS_USE" 					 property="bookCateIsUse"/>
	</resultMap>
	
	<resultMap type="com.study.bookspace.book.vo.BookVO" 	id="book">
		<id 	column="BOOK_CODE" 							property="bookCode"/>
		<result column="BOOK_TITLE" 						property="bookTitle"/>
		<result column="BOOK_AUTHOR" 						property="bookAuthor"/>
		<result column="BOOK_PUBLICATION_DATE"			 	property="bookPublicationDate"/>
		<result column="BOOK_PUBLISHER" 					property="bookPublisher"/>
		<result column="BOOK_INTRO" 						property="bookIntro"/>
		<result column="BOOK_CATE_NO" 						property="bookCateNo"/>
		<result column="BOOK_STOCK_CNT" 					property="bookStockCnt"/>
		<result column="ISBN" 								property="isbn"/>
		<result column="BORROW_CNT"							property="borrowCnt"/>
		<result column="RESERVE_CNT"						property="reserveCnt"/>
		<association property="categoryVO" 					resultMap="category"></association> 		
		<association property="borrowVO" 					resultMap="borrow"></association> 		
		<association property="bookStatusVO" 				resultMap="bookStatus"></association> 		
		<collection property="imgList" 						resultMap="img"></collection>
	</resultMap>
	
		
		<resultMap type="com.study.bookspace.book.vo.BookStatusVO" id="bookStatus">
		    <id column="BOOK_STATUS_NO" 					property="bookStatusNo" />
		    <result column="BOOK_STATUS_STR" 				property="bookStatusStr" />
		</resultMap>
	
	
	<resultMap type="com.study.bookspace.book.vo.ImgVO" 	id="img">	
		<id column="BOOK_IMG_CODE" 							property="bookImgCode"/>
		<result column="BOOK_CODE" 							property="bookCode"/>
		<result column="ORIGIN_FILE_NAME" 					property="originFileName"/>
		<result column="ATTACHED_FILE_NAME" 				property="attachedFileName"/>
		<result column="IS_MAIN_IMG" 						property="isMainImg"/>
	</resultMap>
	

	<resultMap type="com.study.bookspace.book.vo.BorrowVO"	id="borrow">
		<id column="BORROW_CODE" 							property="borrowCode"/>
		<result column="BOOK_CODE" 							property="bookCode"/>
		<result column="MEM_ID" 							property="memId"/>
		<result column="BORROW_DATE" 						property="borrowDate"/>
		<result column="RETURN_DUEDATE" 					property="returnDueDate"/>
		<result column="RETURN_DATE" 						property="returnDate"/>
		<result column="BOOK_TITLE"							property="bookTitle"/>
		<result column="EXTENDED"							property="extended"/>
	</resultMap>

	
	<resultMap type="com.study.bookspace.book.vo.ReserveVO" id="reserve">
		<id column="RESERVE_CODE" 							property="reserveCode"/>
		<result column="BOOK_CODE" 							property="bookCode"/>
		<result column="MEM_ID" 							property="memId"/>
		<result column="RESERVE_DATE" 						property="reserveDate"/>
		<result column="RESERVE_DUEDATE" 					property="reserveDueDate"/>
		<result column="BOOK_ALRAM_DATE" 					property="bookAlramDate"/>
	</resultMap>
	
	<!-- 전체 카테고리 목록 조회 -->
	<select id="getCateListForAdmin" resultMap="category">
		SELECT BOOK_CATE_NO
			, BOOK_CATE_STR
			, BOOK_CATE_IS_USE
		FROM BOOK_CATEGORY
	</select>
	
	<!-- 전체 이미지 목록 조회  -->
	<select id="getImgListForAdmin" resultMap="img">
		SELECT BOOK_IMG_CODE
			, BOOK_CODE
			, ORIGIN_FILE_NAME 
			, ATTACHED_FILE_NAME
			, IS_MAIN_IMG 
		FROM BOOK_IMAGE
	</select>
	
	
		<!-- 특정 도서 이미지, 도서 소개 조회 -->
	<select id="getImgListForBook" resultMap="book">
		SELECT BOOK_IMG_CODE
			, B.BOOK_CODE
			, ORIGIN_FILE_NAME 
			, ATTACHED_FILE_NAME
			, IS_MAIN_IMG 
			, BOOK_INTRO
		FROM BOOK_IMAGE IMG, BOOK B
		WHERE IMG.BOOK_CODE = B.BOOK_CODE 
		AND IMG.BOOK_CODE = #{bookCode}
	</select>
	
	<!-- 이미지 삭제 -->
	<delete id="deleteImg">
	 DELETE BOOK_IMAGE
 	 WHERE BOOK_IMG_CODE = #{bookImgCode}
	</delete>
	
	
	<!-- 메인 이미지 수정 --> 
	<insert id="insertMainImges">
		INSERT INTO BOOK_IMAGE (
			BOOK_IMG_CODE
			, ORIGIN_FILE_NAME
			, ATTACHED_FILE_NAME
			, IS_MAIN_IMG
			, BOOK_CODE 
			, IS_MAIN_IMG
		)
		<foreach collection="imgList" item="img" index="i" separator="UNION ALL">
		SELECT (SELECT 'BK_IMG_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(BOOK_IMG_CODE, 8))), 0) + 1 + #{i}, 3, '0')
  				  FROM BOOK_IMAGE)
			, #{img.originFileName}
			, #{img.attachedFileName}
			, #{img.isMainImg}
			, #{img.bookCode}
			, 'Y'
		FROM DUAL  
		</foreach>
	</insert>
	
	<!-- 서브 이미지 수정 -->
	<insert id="insertSubImges">
		INSERT INTO BOOK_IMAGE (
			BOOK_IMG_CODE
			, ORIGIN_FILE_NAME
			, ATTACHED_FILE_NAME
			, IS_MAIN_IMG
			, BOOK_CODE 
			, IS_MAIN_IMG
		)
		<foreach collection="imgList" item="img" index="i" separator="UNION ALL">
		SELECT (SELECT 'BK_IMG_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(BOOK_IMG_CODE, 8))), 0) + 1 + #{i}, 3, '0')
  				  FROM BOOK_IMAGE)
			, #{img.originFileName}
			, #{img.attachedFileName}
			, #{img.isMainImg}
			, #{img.bookCode}
			, 'N'
		FROM DUAL  
		</foreach>
	</insert>
	
	<!-- 페이징 처리  -->
	<select id="getBoardCnt" resultType="int">
		SELECT COUNT(BOOK_CODE) 
		FROM BOOK
		WHERE CLUB_CODE = #{clubCode}
	</select>
	
	
	<!-- 도서관리 도서 상세 조회 -->
	<select id="getBookDetailForBookManage" resultMap="book">
		SELECT BOOK.BOOK_CODE
			, BOOK_TITLE
			, BOOK_AUTHOR
			, TO_CHAR(BOOK_PUBLICATION_DATE, 'YYYY-MM-DD') BOOK_PUBLICATION_DATE
			, BOOK_PUBLISHER
			, BOOK_INTRO
			, BOOK_CATE_NO
			, BOOK_STOCK_CNT
			, BOOK_IMG_CODE
			, ISBN
			, ORIGIN_FILE_NAME
			, ATTACHED_FILE_NAME
			, IS_MAIN_IMG
		FROM BOOK BOOK, BOOK_IMAGE IMG
		WHERE BOOK.BOOK_CODE = IMG.BOOK_CODE
		AND BOOK.BOOK_CODE = #{bookCode}
	</select>
	
	
	<!-- 도서 대여  -->
	<insert id="borrowBook">
	    INSERT INTO BOOK_BORROW (
	    	BORROW_CODE
	    	, BOOK_CODE
	    	, MEM_ID
	    	, RETURN_DUEDATE
	    ) VALUES (
	    	(SELECT 'BK_BOR_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(BORROW_CODE, 8))), 0) + 1, 3, '0')
			FROM BOOK_BORROW
			WHERE BORROW_CODE LIKE 'BK_BOR_%')
	    	, #{bookCode}
	    	, #{memId}
	    	, SYSDATE + 7
	    )
	</insert>
	
	<!-- 대여 업데이트 쿼리 -->
	<update id="updateBorrowCnt">
		UPDATE BOOK
		SET BORROW_CNT = BORROW_CNT + 1
		WHERE BOOK_CODE = #{bookCode}
	</update>
	
	<!--  BOOK에 있는 예약개수 다운그레이드 쿼리-->
	<update id="downgradeReserveCnt">
		UPDATE BOOK
		SET RESERVE_CNT = RESERVE_CNT - 1
		WHERE BOOK_CODE = #{bookCode}
	</update>
	
	
	<!-- 도서 상태 변경  -->
	<update id="">
	</update>
	
	
	<!-- 현재 보유 중인 책의 개수 -->
	<select id="getNowStockCnt" resultType="int">
	SELECT BOOK_STOCK_CNT - BORROW_CNT
	FROM BOOK
	WHERE BOOK_CODE = #{bookCode}
	</select>

	<!-- 예약 없이 대여 가능한 책의 개수 (모든사람) -->
	<select id="getAbleBookCnt" resultType="int">
	SELECT BOOK_STOCK_CNT - BORROW_CNT - RESERVE_CNT
	FROM BOOK
	WHERE BOOK_CODE = #{bookCode}
	</select>
	
	
	<!-- 대여 가능한 회원인지의 여부 -->
	<select id="getAbleBorrowMem" resultType="int">
	SELECT COUNT (MEM_ID)
	FROM (
	    SELECT ROWNUM RN
	        , MEM_ID
	    FROM BOOK_RESERVE
	    WHERE BOOK_CODE = #{bookCode}
	    ORDER BY RESERVE_DATE
	)
	WHERE RN &lt;= #{nowStockCnt}
	    AND MEM_ID = #{memId}
	</select>
	
	
	<!-- 예약 테이블삭제  -->
	<delete id="deleteReserve">
	DELETE BOOK_RESERVE
	WHERE MEM_ID = #{memId}
	AND BOOK_CODE = #{bookCode}
	</delete>
	
	
	<!-- 예약하기 버튼 클릭 시, 대여한 회원인지 아닌지 확인 여부  -->
	<select id="getCheckBorrow" resultType="int">
	SELECT COUNT(*)
	FROM BOOK_BORROW
	WHERE BOOK_CODE = #{bookCode}
  	AND MEM_ID = #{memId}
	</select>
	
	
	<!-- 도서 예약  -->
	<insert id="reserveBook">
		INSERT INTO BOOK_RESERVE (
	    	RESERVE_CODE
	    	, BOOK_CODE
	    	, MEM_ID
	    ) VALUES (
	    	(SELECT 'BK_RES_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(RESERVE_CODE, 8))), 0) + 1, 3, '0')
			FROM BOOK_RESERVE
			WHERE RESERVE_CODE LIKE 'BK_RES_%')
	    	, #{bookCode}
	    	, #{memId}
	    )
	</insert>
	
	<!-- 예약 업데이트 쿼리 -->
	<update id="updateReserveCnt">
		UPDATE BOOK
		SET RESERVE_CNT = RESERVE_CNT + 1
		WHERE BOOK_CODE = #{bookCode}
	</update>
	
	
	

	<!-- 도서 대여 개수 -->
	<select id="getBorrowAndStockCnt" resultType="Map">
	SELECT BORROW_CNT
		, BOOK_STOCK_CNT
	FROM BOOK
	WHERE BOOK_CODE = #{bookCode}
	</select>
	
	
	
	<!-- 중복 대여 -->
	<select id="checkBorrowStatus" resultType="int">
	  SELECT COUNT(*) 
	  FROM BOOK_BORROW
	  WHERE MEM_ID = #{memId} 
	  AND BOOK_CODE = #{bookCode} 
	  AND RETURN_DATE IS NULL
	</select>
	
	<!-- 회원의 도서 대여 개수 확인 -->
	<select id="getBorrowLimit" resultType="int">
	  SELECT COUNT(*) 
	  FROM BOOK_BORROW
	  WHERE MEM_ID = #{memId} 
	  AND RETURN_DATE IS NULL
	</select>

		<!-- 중복 예약 -->
	<select id="checkReserveStatus" resultType="int">
	  SELECT COUNT(*) 
	  FROM BOOK_RESERVE
	  WHERE MEM_ID = #{memId} 
	  AND BOOK_CODE = #{bookCode} 
	</select>
	
	<!-- 회원의 도서 예약 개수 확인 -->
	<select id="getReserveLimit" resultType="int">
	  SELECT COUNT(*) 
	  FROM BOOK_RESERVE
	  WHERE MEM_ID = #{memId} 
	</select>
	


	<!-- 사용 중인 카테고리 목록 -->
	<select id="getCateListInUse" resultMap="category">
		SELECT BOOK_CATE_NO
			, BOOK_CATE_STR
		FROM BOOK_CATEGORY
		WHERE BOOK_CATE_IS_USE = 'Y' 
		ORDER BY BOOK_CATE_NO
	</select>
	

	<!-- 등록될 북코드 -->
	<select id="getNextBookCode" resultType="String">
		SELECT 'BK_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(BOOK_CODE, 4))), 0) + 1, 3, '0')
		FROM BOOK
	</select>

	
	<!-- 도서 등록  -->
	<insert id="regBook">
		INSERT INTO BOOK (
			BOOK_CODE
			, BOOK_TITLE
			, BOOK_AUTHOR
			, BOOK_PUBLICATION_DATE
			, BOOK_PUBLISHER
			, BOOK_INTRO
			, BOOK_CATE_NO
			, BOOK_STOCK_CNT
			, ISBN
		) VALUES (
			#{bookCode}
			, #{bookTitle}
			, #{bookAuthor}
			, #{bookPublicationDate}
			, #{bookPublisher}
			, #{bookIntro}
			, #{bookCateNo}
			, #{bookStockCnt}
			, #{isbn}
		)
	</insert>
	


	<!-- 이미지 등록 --> 
	<insert id="insertImges">
		INSERT INTO BOOK_IMAGE (
			BOOK_IMG_CODE
			, ORIGIN_FILE_NAME
			, ATTACHED_FILE_NAME
			, IS_MAIN_IMG
			, BOOK_CODE 
		)
		<foreach collection="imgList" item="img" index="i" separator="UNION ALL">
		SELECT (SELECT 'BK_IMG_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(BOOK_IMG_CODE, 8))), 0) + 1 + #{i}, 3, '0')
  				  FROM BOOK_IMAGE)
			, #{img.originFileName}
			, #{img.attachedFileName}
			, #{img.isMainImg}
			, #{img.bookCode}
		FROM DUAL  
		</foreach>
	</insert>
	
	
	<!-- 목록조회 -->
	<select id="getBookListForUser" resultMap="book">
		SELECT BOOK.BOOK_CODE
			, BOOK_TITLE
			, BOOK_AUTHOR
			, BOOK_PUBLICATION_DATE
			, BOOK_PUBLISHER
			, BOOK_INTRO
			, BOOK_CATE_NO
			, BOOK_STOCK_CNT
			, ISBN
			, ATTACHED_FILE_NAME
			, BORROW_CNT
		FROM BOOK BOOK, BOOK_IMAGE IMG
		WHERE BOOK.BOOK_CODE = IMG.BOOK_CODE
		  <if test="searchOption == 'title'">
        AND LOWER(BOOK_TITLE) LIKE '%' || LOWER(#{searchText}) || '%'
    </if>
    <if test="searchOption == 'author'">
        AND LOWER(BOOK_AUTHOR) LIKE '%' || LOWER(#{searchText}) || '%'
    </if>
		AND IS_MAIN_IMG = 'Y' 
	</select>


	<!-- 신작 조회 -->
		<select id="getNewBookList" resultMap="book">
	  SELECT BOOK.BOOK_CODE
	    , BOOK_TITLE
	    , BOOK_AUTHOR
	    , BOOK_PUBLICATION_DATE
	    , BOOK_PUBLISHER
	    , BOOK_INTRO
	    , BOOK_CATE_NO
	    , BOOK_STOCK_CNT
	    , ISBN
	    , ATTACHED_FILE_NAME
	    , BORROW_CNT
	  FROM BOOK BOOK, BOOK_IMAGE IMG
	  WHERE BOOK.BOOK_CODE = IMG.BOOK_CODE
	    AND IS_MAIN_IMG = 'Y'
	    AND BOOK_PUBLICATION_DATE >= TRUNC(SYSDATE, 'IW')
	  ORDER BY BOOK_PUBLICATION_DATE DESC
	</select>
	
	<!-- 베스트 셀러 -->
	<select id="getBestBookList" resultMap="book">
	    SELECT BOOK.BOOK_CODE
	        , BOOK_TITLE
	        , BOOK_AUTHOR
	        , BOOK_PUBLICATION_DATE
	        , BOOK_PUBLISHER
	        , BOOK_INTRO
	        , BOOK_CATE_NO
	        , BOOK_STOCK_CNT
	        , ISBN
	        , ATTACHED_FILE_NAME
	        , BORROW_CNT
	    FROM BOOK BOOK, BOOK_IMAGE IMG
	    WHERE BOOK.BOOK_CODE = IMG.BOOK_CODE
	    AND IS_MAIN_IMG = 'Y'
	    ORDER BY BORROW_CNT DESC
	</select>
	
	
	
	<!-- 도서 상세 조회  -->
	<select id="getBookDetail" resultMap="book">
		SELECT BOOK.BOOK_CODE
			, BOOK_TITLE
			, BOOK_AUTHOR
			, TO_CHAR(BOOK_PUBLICATION_DATE, 'YYYY-MM-DD') BOOK_PUBLICATION_DATE
			, BOOK_PUBLISHER
			, BOOK_INTRO
			, BOOK_CATE_NO
			, BOOK_STOCK_CNT
			, BORROW_CNT
			, RESERVE_CNT
			, ISBN
			, ATTACHED_FILE_NAME
			, IS_MAIN_IMG
    FROM BOOK BOOK, BOOK_IMAGE IMG
    WHERE BOOK.BOOK_CODE = IMG.BOOK_CODE
    AND BOOK.BOOK_CODE = #{bookCode}
	</select>
	
	
	<!-- 도서관리 도서 목록 조회  -->
	<select id="getBookListForAdminManage" resultMap="book">
		SELECT BOOK.BOOK_CODE
			, BOOK_TITLE
		    , BOOK_AUTHOR
		    , TO_CHAR(BOOK_PUBLICATION_DATE, 'YYYY-MM-DD') AS BOOK_PUBLICATION_DATE
		    , BOOK_PUBLISHER
		    , CATEGORY.BOOK_CATE_NO
		    , CATEGORY.BOOK_CATE_STR
		    , BOOK.BOOK_STATUS_NO
		    , BOOK_STOCK_CNT
		    , ISBN
		    , BOOK_STATUS_STR
		FROM BOOK BOOK, BOOK_STATUS STATUS, BOOK_CATEGORY CATEGORY
		WHERE BOOK.BOOK_STATUS_NO = STATUS.BOOK_STATUS_NO
		AND BOOK.BOOK_CATE_NO = CATEGORY.BOOK_CATE_NO
		
		
					
			<!-- 검색 조건 -->

		<if test="searchBookVO != null">
		    AND CATEGORY.BOOK_CATE_NO IN 
		    <foreach collection="searchBookVO.searchBookCateNo" item="bookCateNo" open="(" close=")" separator=",">
		    	#{bookCateNo}
		    </foreach>
		 </if>
		<if test='searchBookVO != null and !searchBookVO.searchBookTitle.equals("")'>				
		    AND UPPER(BOOK_TITLE) LIKE '%'||UPPER(#{searchBookVO.searchBookTitle})||'%'
		</if>
		
		<if test='searchBookVO != null and !searchBookVO.searchBookAuthor.equals("")'>				
		    AND UPPER(BOOK_AUTHOR) LIKE '%'||UPPER(#{searchBookVO.searchBookAuthor})||'%'
		</if>
		
		<if test="searchBookVO != null and searchBookVO.searchPublicationDate != null">
   			 AND TO_CHAR(BOOK_PUBLICATION_DATE, 'YYYY-MM-DD') LIKE '%'||#{searchBookVO.searchPublicationDate}||'%'
		</if>
		
		<if test='searchBookVO != null and !searchBookVO.searchPublisher.equals("")'>				
		    AND UPPER(BOOK_PUBLISHER) LIKE '%'||UPPER(#{searchBookVO.searchPublisher})||'%'
		</if>
	
		  <if test="searchBookVO != null and searchBookVO.searchISBN != 0">
     		   AND ISBN = #{searchBookVO.searchIsbn}
   		 </if>

		<if test="searchBookVO != null and !searchBookVO.searchBookStatusStr.equals('')">
		   AND BOOK_STATUS_STR = #{searchBookVO.searchBookStatusStr}
		</if>
		
		<if test='searchBookVO != null and !searchBookVO.searchFromBookStock.equals("")'>
		    AND BOOK_STOCK_CNT &gt;= TO_NUMBER(#{searchBookVO.searchFromBookStock})			
		</if>
		<if test='searchBookVO != null and !searchBookVO.searchToBookStock.equals("")'>
		    AND BOOK_STOCK_CNT &lt;= TO_NUMBER(#{searchBookVO.searchToBookStock})		
		</if>  
		ORDER BY BOOK_PUBLICATION_DATE DESC
	</select>
	
	
	<!-- 도서관리) 대여 관리 -->
	<select id="borrowManage" resultMap="borrow">
		SELECT B.BOOK_TITLE
			, BR.BORROW_DATE
			, BR.RETURN_DATE
			, BR.RETURN_DUEDATE
			, M.MEM_NAME
		FROM BOOK_BORROW BR, BOOK B, MEMBER M
		WHERE BR.BOOK_CODE = B.BOOK_CODE
		AND BR.MEM_ID = M.MEM_ID
	</select>
	
	
	
	<!-- 내가 대여한 책 -->
	<select id="myBorrow" resultMap="borrow">
		SELECT B.BOOK_TITLE
			, BR.BORROW_DATE
			, BR.RETURN_DATE
			, BR.RETURN_DUEDATE
			, BR.MEM_ID
			, BR.BORROW_CODE
			, B.BOOK_CODE
			, EXTENDED
		FROM BOOK_BORROW BR, BOOK B
		WHERE BR.BOOK_CODE = B.BOOK_CODE
		AND BR.MEM_ID = #{memId}
		ORDER BY BR.BORROW_DATE DESC
	</select>
	
		
		<!-- 반납 연장 -->
	<update id="extendBorrow">
	    UPDATE BOOK_BORROW
	    SET RETURN_DUEDATE = RETURN_DUEDATE + 3
	    , EXTENDED = 'Y'
	    WHERE BORROW_CODE = #{borrowCode}
	</update>
			
			
		<!-- 반납 연장 전, 예약 여부 확인 -->
	<select id="checkReserveBeforeExtend" resultType="int">
		  SELECT COUNT(*) 
		  FROM BOOK_RESERVE
		  WHERE BOOK_CODE = #{bookCode}
	</select>
	
		
	<!-- 도서관리) 도서 삭제  (자식 레코드)-->
	<delete id="deleteBook">
	  <foreach collection="bookCodeList" item="bookCode" separator=";">
	    <![CDATA[
	      BEGIN
	        DELETE FROM BOOK_IMAGE WHERE BOOK_CODE = #{bookCode};
	        DELETE FROM BOOK_RESERVE WHERE BOOK_CODE = #{bookCode};
	        DELETE FROM BOOK_BORROW WHERE BOOK_CODE = #{bookCode};
	        DELETE FROM BOOK WHERE BOOK_CODE = #{bookCode};
	        COMMIT;
	      END;
	    ]]>
	  </foreach>
	</delete>


		<!-- 도서 정보 수정 -->
		<update id="updateBook">
			UPDATE BOOK
			SET
				BOOK_TITLE = #{bookTitle}
				, BOOK_AUTHOR = #{bookAuthor}
				, BOOK_PUBLICATION_DATE = #{bookPublicationDate}
				, BOOK_PUBLISHER = #{bookPublisher}
				, BOOK_CATE_NO = #{bookCateNo}
				, BOOK_STOCK_CNT = #{bookStockCnt}
			  WHERE BOOK_CODE = #{bookCode}
		</update>
		
		
		<!-- 도서 이미지, 소개 수정 -->
		<update id="updateBookDetail">
			UPDATE BOOK
			SET
				BOOK_INTRO = #{bookIntro}
			  WHERE 
			 BOOK_CODE = #{bookCode}
		</update>
		
		
		
		
		<!-- 도서 반납 -->
	<update id="returnBook">
	    UPDATE BOOK_BORROW
	    SET RETURN_DATE = SYSDATE
	    WHERE BORROW_CODE = #{borrowCode}
	</update>

		<!-- 반납 업데이트 쿼리 -->
	<update id="updateReturnCnt">
	    UPDATE BOOK
	    SET BORROW_CNT = BORROW_CNT - 1
	    WHERE BOOK_CODE = #{bookCode}
	</update>
	
		
		
		<!-- 연장 버튼 클릭 후, 바뀐 반납 기한 -->
	<select id="getReturnDuedate" resultType="String">
		SELECT RETURN_DUEDATE
		FROM BOOK_BORROW
		WHERE BORROW_CODE = #{borrowCode}
	</select>
	
	
	<!-- 예약 취소 -->
	<delete id="delReserve">
		DELTE FROM BOOK_RESERVE
		WHERE BOOK_CODE = #{bookCode}
		AND MEM_ID = #{memId}
	</delete>
	
	<!-- 첫번째로 예약한 사람 ID  -->
	<select id="getFirstReserveId" resultType="String">
		SELECT MEM_ID
		FROM BOOK_RESERVE
		WHERE BOOK_CODE = #{bookCode}
		ORDER BY RESERVE_DATE 
	</select>
	
	
	<!-- 예약한 사람 ID  -->
	<select id="getReserveId" resultType="String">
		SELECT MEM_ID
		FROM BOOK_RESERVE
		WHERE BOOK_CODE = #{bookCode}
	</select>
	
	
	<!-- 페이징 -->
	<select id="getBookCnt" resultType="int">
		SELECT COUNT(*) 
		FROM BOOK
	</select>
	
</mapper>


